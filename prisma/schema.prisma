generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas  = ["public"]
}

model Profile {
  id              String   @id @db.Uuid // PK *and* FK to auth.users.id
  display_name    String
  about           String?  @db.Text
  kindle_email    String?  @db.Text
  favorite_genres String[]
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)

  // Relationships moved from the old User model
  ownedClubs       Club[]           @relation("ClubOwner")
  memberships      ClubMembership[]
  reactions        Reaction[]
  userBooks        UserBook[]
  clubDiscussions  ClubDiscussion[] @relation("DiscussionAuthor")
  sentRequests     FriendRequest[]  @relation("SentRequests")
  receivedRequests FriendRequest[]  @relation("ReceivedRequests")
  friendshipsAsUser1 Friendship[]   @relation("FriendshipAsUser1")
  friendshipsAsUser2 Friendship[]   @relation("FriendshipAsUser2")

  // Optional: if Book.added_by was meant to be a user, add this relation
  // addedBooks Book[] @relation("BookCreator")

  @@map("profiles")
  @@schema("public")
}

model Book {
  id             String   @id @default(uuid()) @db.Uuid
  title          String
  author         String?
  cover_url      String?
  description    String?
  reading_time   String?
  pages          Int?
  genres         String[]
  published_date String?
  rating         Float?
  added_by       String?  @db.Uuid // This will now point to Profile.id
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  // Optional: Relation for added_by if it points to a Profile
  // creator Profile? @relation("BookCreator", fields: [added_by], references: [id])

  file             BookFile[]       @relation("BookToBookFile")
  UserBook         UserBook[]
  current_in_clubs Club[]           @relation("CurrentClubBook")
  club_history     ClubBook[]
  ClubDiscussion   ClubDiscussion[]

  @@map("books")
  @@schema("public")
}

model BookFile {
  id            String  @id @default(uuid()) @db.Uuid
  book_id       String  @db.Uuid
  storage_key   String
  original_name String?
  mime_type     String?
  size_bytes    Int?

  book Book @relation("BookToBookFile", fields: [book_id], references: [id]) // <-- Used same explicit relation name
  // REMOVED: If you had @@unique([book_id]) here previously, remove it. It's incorrect for one-to-many.

  @@map("book_files")
  @@schema("public")
}

model FriendRequest {
  id         String              @id @default(uuid()) @db.Uuid
  senderId   String              @db.Uuid
  receiverId String              @db.Uuid
  status     FriendRequestStatus @default(PENDING)
  sentAt     DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime            @updatedAt @db.Timestamptz(6)

  sender   Profile @relation("SentRequests", fields: [senderId], references: [id])
  receiver Profile @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
  @@schema("public")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED

  @@schema("public")
}

model Friendship {
  id            String   @id @default(uuid()) @db.Uuid
  userId1       String   @db.Uuid // Conceptually Profile.id
  userId2       String   @db.Uuid // Conceptually Profile.id
  establishedAt DateTime @default(now()) @db.Timestamptz(6)

  user_one Profile @relation("FriendshipAsUser1", fields: [userId1], references: [id])
  user_two Profile @relation("FriendshipAsUser2", fields: [userId2], references: [id])

  @@unique([userId1, userId2])
  @@map("friendships")
  @@schema("public")
}

model Club {
  id              String   @id @default(uuid()) @db.Uuid
  name            String   @unique
  description     String?
  owner_id        String   @db.Uuid // This will now point to Profile.id
  memberCount     Int      @default(0)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)
  is_private      Boolean
  current_book_id String?  @db.Uuid

  owner          Profile          @relation("ClubOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  memberships    ClubMembership[]
  current_book   Book?            @relation("CurrentClubBook", fields: [current_book_id], references: [id])
  book_history   ClubBook[]
  ClubDiscussion ClubDiscussion[]

  @@map("clubs")
  @@schema("public")
}

model ClubMembership {
  id        String               @id @default(uuid()) @db.Uuid
  user_id   String               @db.Uuid // This will now point to Profile.id
  club_id   String               @db.Uuid
  role      ClubRole             @default(MEMBER)
  status    ClubMembershipStatus @default(ACTIVE)
  joined_at DateTime             @default(now()) @db.Timestamptz(6)

  user Profile @relation(fields: [user_id], references: [id])
  club Club    @relation(fields: [club_id], references: [id])

  @@unique([user_id, club_id])
  @@map("club_memberships")
  @@schema("public")
}

enum ClubRole {
  MEMBER
  ADMIN
  OWNER

  @@schema("public")
}

enum ClubMembershipStatus {
  ACTIVE
  PENDING
  REJECTED
  LEFT
  SUSPENDED

  @@schema("public")
}

model Reaction {
  id          String             @id @default(uuid()) @db.Uuid
  user_id     String             @db.Uuid // This will now point to Profile.id
  target_type ReactionTargetType
  target_id   String             @db.Uuid
  type        ReactionType
  created_at  DateTime           @default(now()) @db.Timestamptz(6)

  user             Profile         @relation(fields: [user_id], references: [id])
  ClubDiscussion   ClubDiscussion? @relation(fields: [clubDiscussionId], references: [id])
  clubDiscussionId String?         @db.Uuid

  @@unique([user_id, target_type, target_id, type])
  @@map("reactions")
  @@schema("public")
}

enum ReactionTargetType {
  BOOK
  COMMENT
  CLUB_DISCUSSION

  @@schema("public")
}

enum ReactionType {
  LIKE // Added LIKE as a common reaction type
  HEART
  THUMBS_UP
  THUMBS_DOWN

  @@schema("public")
}

enum shelf_type {
  favorite
  currently_reading
  queue

  @@schema("public")
}

enum status_type {
  in_progress
  almost_done
  finished

  @@schema("public")
}

model UserBook {
  user_id  String      @db.Uuid // This will now point to Profile.id
  book_id  String      @db.Uuid
  shelf    shelf_type
  status   status_type
  position Int?
  added_at DateTime    @default(now()) @db.Timestamptz(6)
  comment  String?

  book Book    @relation(fields: [book_id], references: [id])
  user Profile @relation(fields: [user_id], references: [id])

  @@id([user_id, book_id, shelf])
  @@map("user_books")
  @@schema("public")
}

// New model to track book reading history in clubs
model ClubBook {
  id          String           @id @default(uuid()) @db.Uuid
  club_id     String           @db.Uuid
  book_id     String           @db.Uuid
  started_at  DateTime         @default(now()) @db.Timestamptz(6)
  finished_at DateTime?        @db.Timestamptz(6)
  status      club_book_status @default(IN_PROGRESS)

  club Club @relation(fields: [club_id], references: [id])
  book Book @relation(fields: [book_id], references: [id])

  @@map("club_books")
  @@schema("public")
}

enum club_book_status {
  IN_PROGRESS
  COMPLETED
  ABANDONED

  @@schema("public")
}

// New model for Club Discussions
model ClubDiscussion {
  id                   String   @id @default(uuid()) @db.Uuid
  user_id              String   @db.Uuid // This will now point to Profile.id
  club_id              String   @db.Uuid
  book_id              String   @db.Uuid
  content              String
  parent_discussion_id String?  @db.Uuid
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  user              Profile          @relation("DiscussionAuthor", fields: [user_id], references: [id], onDelete: Cascade)
  club              Club             @relation(fields: [club_id], references: [id], onDelete: Cascade)
  book              Book             @relation(fields: [book_id], references: [id], onDelete: Cascade)
  parent_discussion ClubDiscussion?  @relation("DiscussionReplies", fields: [parent_discussion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies           ClubDiscussion[] @relation("DiscussionReplies")
  reactions         Reaction[]

  @@map("club_discussions")
  @@schema("public")
}
